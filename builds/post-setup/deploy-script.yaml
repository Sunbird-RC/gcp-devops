steps:
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Authorize Cloud Build'
    entrypoint: 'bash'
    args:
      - -c
      - |
        apt-get install dnsutils jq -y &&
        cloudbuild_external_ip=$(dig @resolver4.opendns.com myip.opendns.com +short) &&
        old_cidr=$(gcloud container clusters describe ${_CLUSTER_NAME_} --zone=${_REGION_} --format json | jq -r '.masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock' | tr '\n' ',') &&
        gcloud container clusters update ${_CLUSTER_NAME_} --zone=${_REGION_} --enable-master-authorized-networks --master-authorized-networks "$old_cidr$cloudbuild_external_ip/32"
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'get-credentials'
    args: ['container', 'clusters', 'get-credentials', '${_CLUSTER_NAME_}', '--project=${_PROJECT_ID_}', '--region=${_REGION_}']
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'keycloak-setup'
    entrypoint: 'bash'
    waitFor: 'get-credentials'
    args:
      - -c
      - bash deployments/scripts/keycloak-init.sh ${_DOMAIN_}
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Remove worker cidr'
    entrypoint: 'bash'
    waitFor: 'keycloak-setup'
    args:
      - -c
      - |
        apt-get install dnsutils jq -y &&
        cloudbuild_external_ip=$(dig @resolver4.opendns.com myip.opendns.com +short) &&
        old_cidr=$(gcloud container clusters describe ${_CLUSTER_NAME_} --zone=${_REGION_} --format json | jq 'del(.masterAuthorizedNetworksConfig.cidrBlocks[] | select(.cidrBlock == "'"$cloudbuild_external_ip/32"'"))' | jq -r '.masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock' | tr '\n' ','  | sed 's/,$//' ) &&
        gcloud container clusters update ${_CLUSTER_NAME_} --zone=${_REGION_} --enable-master-authorized-networks --master-authorized-networks "$old_cidr"
tags: ['cloud-builders-community']
serviceAccount: "projects/${_PROJECT_ID_}/serviceAccounts/${_SERVICE_ACCOUNT_}"
logsBucket: "gs://${_LOG_BUCKET_}"
substitutions:
  _PROJECT_ID_: ''
  _REGION_: ''
  _CLUSTER_NAME_: 'functional-registry-cluster'
  _DOMAIN_: ''
  _LOG_BUCKET_: ''
  _SERVICE_ACCOUNT_: ''
options:
  dynamicSubstitutions: true
#  pool:
#    name: 'projects/${_PROJECT_ID_}/locations/${_REGION_}/workerPools/cloudbuild-private-worker-pool'
